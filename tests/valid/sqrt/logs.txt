main started
Code Block Started
Code block start position = 0
Constructed Constant: 144
Identifier val created
[Variables] <--- val
id = 94709195362608
Before access
---Stack size = 1---
Constructed Constant: 0
Identifier x created
[Variables] <--- x
id = 94709195364144
Before access
---Stack size = 2---
While block started
Looking for variable: x
Looking for variable: x
Looking for variable: val
Code Block Started
Code block start position = 2
Looking for variable: x
Constructed Constant: 1
expr + expr << 
x assigned
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
While cycle created
---Stack size = 3---
If block started
Looking for variable: x
Looking for variable: x
Looking for variable: val
Code Block Started
Code block start position = 3
LEXED PRINT
Constructed Constant: "Precise square root of val = "
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 4---
LEXED PRINT
Looking for variable: x
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 5---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 3
LEXED PRINT
Constructed Constant: "Sqrt is not integer!"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 4---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 4---
CodeBlock successfully packed: size = 4
_____CodeBlock created_____
Main: 
Start generating code...
AST block size = 4
Generating block...
1 statement:
Generating declaration for val...
Generating Ident with name "val"...
val assigned
Generating assignment for val...
Generating constant i32...
Extracting val...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating declaration for x...
Generating Ident with name "x"...
x assigned
Generating assignment for x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
3 statement:
Generating binary op...
Generating binary op...
Extracting x...
Extracting x...
Extracting val...
Generating block...
1 statement:
Generating assignment for x...
Generating binary op...
Extracting x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4 statement:
Generating binary op...
Generating binary op...
Extracting x...
Extracting x...
Extracting val...
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
2 statement:
Inside PrintStatement codegen
Extracting x...
value to be printed is calculated
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
B4 assert: 94709195389424
; ModuleID = 'main'
source_filename = "main"

@fmtInt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmtStr = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@0 = private unnamed_addr constant [32 x i8] c"\22Precise square root of val = \22\00", align 1
@1 = private unnamed_addr constant [23 x i8] c"\22Sqrt is not integer!\22\00", align 1

define i32 @main() {
entry:
  %val = alloca i32, align 4
  store i32 144, i32* %val, align 4
  %0 = load i32, i32* %val, align 4
  %x = alloca i32, align 4
  store i32 0, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  br label %condloop

condloop:                                         ; preds = %loop, %entry
  %2 = load i32, i32* %x, align 4
  %3 = load i32, i32* %x, align 4
  %4 = mul i32 %2, %3
  %5 = load i32, i32* %val, align 4
  %6 = icmp slt i32 %4, %5
  %loopcond = icmp ne i1 %6, false
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %condloop
  %7 = load i32, i32* %x, align 4
  %8 = load i32, i32* %x, align 4
  %9 = mul i32 %7, %8
  %10 = load i32, i32* %val, align 4
  %11 = icmp eq i32 %9, %10
  %ifcond = icmp eq i1 %11, true
  br i1 %ifcond, label %then, label %else

loop:                                             ; preds = %condloop
  %12 = load i32, i32* %x, align 4
  %13 = add i32 %12, 1
  store i32 %13, i32* %x, align 4
  %14 = load i32, i32* %x, align 4
  br label %condloop

then:                                             ; preds = %afterloop
  %print = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @0, i32 0, i32 0))
  %15 = load i32, i32* %x, align 4
  %print1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtInt, i32 0, i32 0), i32 %15)
  br label %merge

else:                                             ; preds = %afterloop
  %print2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1, i32 0, i32 0))
  br label %merge

merge:                                            ; preds = %else, %then
  %iftmp = phi i1 [ true, %then ], [ true, %else ]
  ret i32 0
}

declare i32 @printf(i8*, ...)
Code generated..
