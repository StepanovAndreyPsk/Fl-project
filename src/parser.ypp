%{
#include "node.hpp"
#include <iostream>
#include <string>
#include <cstdlib>
#include <cassert>


using namespace std;

extern int yylex();

int yyerror(const char *p) {
    cerr << "Error! Unexpected token " << p << endl;
    return 1;
}

%}

%union {
    std::string *word;
    char sym;
    int num;
    bool boolean;
    AST::VarDecl *vardecl;
    AST::Identifier *ident;
    AST::Expression *expr;
    AST::DataType type;
    AST::VarAssign *varassign;
    AST::WhileLoop *whileloop;
    AST::CodeBlock *codeblock;
    AST::Statement *statement;
    AST::Skip *skip;
    AST::IfStatement *if_stmt;
}

%token <word> MAIN IF ELSE WHILE SKIP
%token <word> INT_TYPE BOOL_TYPE STRING_TYPE
%token <word> VAR
%token <word> STRING
%token <sym> SEP LP RP LB RB ASSIGN
%token <sym> PLUS MINUS MUL DIV POW
%token <word> EQ NEQ LT LE GT GE NOT AND OR
%token <num> INT
%token <boolean> TRUE_VAL FALSE_VAL

%left OR
%left AND
%left NOT
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left MUL DIV
%right POW

%type <vardecl> declaration; 
%type <expr> EXPR;
%type <type> type;
%type <expr> CONST;
%type <varassign> assignment;
%type <whileloop> while_statement;
%type <codeblock> code_block;
%type <statement> statement;
%type <skip> skip;
%type <if_stmt> if_statement;
%type <if_stmt> if_stmt;

%%
start: MAIN LP RP code_block  {cout << "Main: " << endl;}

code_block: LB statements_seq RB {
    $$ = new AST::CodeBlock(AST::CurCodeBlock);
    AST::CurCodeBlock.clear();
}

statements_seq: statements_seq statement {}
| statement {}

statement: declaration {
    AST::CurCodeBlock.push_back($1);
}
| assignment {
    AST::CurCodeBlock.push_back($1);
}
| skip {
    AST::CurCodeBlock.push_back($1);
}
| if_statement {
    AST::CurCodeBlock.push_back($1);
}
| while_statement {
    AST::CurCodeBlock.push_back($1);
}
;

skip: SKIP SEP {
    $$ = new AST::Skip;
}

declaration: type VAR ASSIGN EXPR SEP {
    AST::Identifier *id = new AST::Identifier($1, *$2); delete $2;
    $$ = new AST::VarDecl(id, *$4);
}

type: INT_TYPE { $$ = AST::DataType::Int; }
| BOOL_TYPE { $$ = AST::DataType::Bool; }
| STRING_TYPE { $$ = AST::DataType::String; }

assignment: VAR ASSIGN EXPR SEP {
    $$ = new AST::VarAssign(*$1, *$3);
}

if_statement: if_stmt optional_else {}

if_stmt: IF LP EXPR RP code_block {}

optional_else: ELSE code_block {}
| {}
;

while_statement: WHILE LP EXPR RP code_block {
    $$ = new AST::WhileLoop(*$3, *$5);
};

EXPR : CONST { $$ = $1; }
| MINUS EXPR {}
| VAR {cout << *$1 << endl;}
| LP EXPR RP {}
| EXPR PLUS  EXPR {}
| EXPR MINUS EXPR {}
| EXPR MUL   EXPR {}
| EXPR DIV   EXPR {}
| EXPR POW   EXPR {}
| NOT EXPR {}
| EXPR AND EXPR {}
| EXPR OR EXPR {}
| EXPR EQ EXPR {}
| EXPR NEQ EXPR {}
| EXPR LE EXPR {}
| EXPR LT EXPR {}
| EXPR GE EXPR {}
| EXPR GT EXPR {}
;

CONST: INT { $$ = new AST::Constant($1); }
| STRING { $$ = new AST::Constant(*$1); delete $1; }
| TRUE_VAL { $$ = new AST::Constant($1); }
| FALSE_VAL { $$ = new AST::Constant($1); }

%%


int main(int argc, char* argv[])
{
    freopen(argv[1], "r", stdin);
    yyparse();
    fclose(stdin);

    return 0;
}
