main started
Code Block Started
Code block start position = 0
Constructed Constant: 9
Identifier pos created
[Variables] <--- pos
id = 93872824070448
Before access
---Stack size = 1---
Constructed Constant: 0
Identifier x created
[Variables] <--- x
id = 93872824071984
Before access
---Stack size = 2---
Constructed Constant: 1
Identifier y created
[Variables] <--- y
id = 93872824072224
Before access
---Stack size = 3---
Constructed Constant: 1
Identifier curPos created
[Variables] <--- curPos
id = 93872824072464
Before access
---Stack size = 4---
While block started
Looking for variable: curPos
Looking for variable: pos
Code Block Started
Code block start position = 4
Looking for variable: x
Looking for variable: y
expr + expr << 
Identifier next created
[Variables] <--- next
id = 93872824073056
Before access
---Stack size = 5---
Looking for variable: y
x assigned
---Stack size = 6---
Looking for variable: next
y assigned
---Stack size = 7---
Looking for variable: curPos
Constructed Constant: 1
expr + expr << 
curPos assigned
---Stack size = 8---
CodeBlock successfully packed: size = 4
_____CodeBlock created_____
While cycle created
---Stack size = 5---
LEXED PRINT
Looking for variable: y
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 6---
CodeBlock successfully packed: size = 6
_____CodeBlock created_____
Main: 
Start generating code...
AST block size = 6
Generating block...
1 statement:
Generating declaration for pos...
Generating Ident with name "pos"...
pos assigned
Generating assignment for pos...
Generating constant i32...
Extracting pos...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating declaration for x...
Generating Ident with name "x"...
x assigned
Generating assignment for x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
3 statement:
Generating declaration for y...
Generating Ident with name "y"...
y assigned
Generating assignment for y...
Generating constant i32...
Extracting y...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4 statement:
Generating declaration for curPos...
Generating Ident with name "curPos"...
curPos assigned
Generating assignment for curPos...
Generating constant i32...
Extracting curPos...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
5 statement:
Generating binary op...
Extracting curPos...
Extracting pos...
Generating block...
1 statement:
Generating declaration for next...
Generating Ident with name "next"...
next assigned
Generating assignment for next...
Generating binary op...
Extracting x...
Extracting y...
Extracting next...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating assignment for x...
Extracting y...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
3 statement:
Generating assignment for y...
Extracting next...
Extracting y...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4 statement:
Generating assignment for curPos...
Generating binary op...
Extracting curPos...
Generating constant i32...
Extracting curPos...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
6 statement:
Inside PrintStatement codegen
Extracting y...
value to be printed is calculated
; ModuleID = 'main'
source_filename = "main"

@fmtInt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmtStr = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @main() {
entry:
  %pos = alloca i32, align 4
  store i32 9, i32* %pos, align 4
  %0 = load i32, i32* %pos, align 4
  %x = alloca i32, align 4
  store i32 0, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %y = alloca i32, align 4
  store i32 1, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %curPos = alloca i32, align 4
  store i32 1, i32* %curPos, align 4
  %3 = load i32, i32* %curPos, align 4
  br label %condloop

condloop:                                         ; preds = %loop, %entry
  %4 = load i32, i32* %curPos, align 4
  %5 = load i32, i32* %pos, align 4
  %6 = icmp ne i32 %4, %5
  %loopcond = icmp ne i1 %6, false
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %condloop
  %7 = load i32, i32* %y, align 4
  %print = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtInt, i32 0, i32 0), i32 %7)
  ret i32 0

loop:                                             ; preds = %condloop
  %next = alloca i32, align 4
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %y, align 4
  %10 = add i32 %8, %9
  store i32 %10, i32* %next, align 4
  %11 = load i32, i32* %next, align 4
  %12 = load i32, i32* %y, align 4
  store i32 %12, i32* %x, align 4
  %13 = load i32, i32* %x, align 4
  %14 = load i32, i32* %next, align 4
  store i32 %14, i32* %y, align 4
  %15 = load i32, i32* %y, align 4
  %16 = load i32, i32* %curPos, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %curPos, align 4
  %18 = load i32, i32* %curPos, align 4
  br label %condloop
}

declare i32 @printf(i8*, ...)
Code generated..
