main started
Code Block Started
Code block start position = 0
Constructed Constant: 37
Identifier x created
[Variables] <--- x
id = 94330814599472
Before access
---Stack size = 1---
If block started
Constructed Constant: 0
Looking for variable: x
Looking for variable: x
Constructed Constant: 100
Code Block Started
Code block start position = 1
If block started
Looking for variable: x
Constructed Constant: 50
Code Block Started
Code block start position = 1
If block started
Looking for variable: x
Constructed Constant: 25
Code Block Started
Code block start position = 1
While block started
Looking for variable: x
Constructed Constant: 2
Code Block Started
Code block start position = 1
Looking for variable: x
Constructed Constant: 2
x assigned
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
While cycle created
---Stack size = 2---
If block started
Looking for variable: x
Constructed Constant: 1
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "odd number in first quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "even number in first quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 3---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 1
While block started
Looking for variable: x
Constructed Constant: 2
Code Block Started
Code block start position = 1
Looking for variable: x
Constructed Constant: 2
x assigned
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
While cycle created
---Stack size = 2---
If block started
Looking for variable: x
Constructed Constant: 1
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "odd number in second quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "even number in second quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 3---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
If statement created
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 1
If block started
Looking for variable: x
Constructed Constant: 75
Code Block Started
Code block start position = 1
While block started
Looking for variable: x
Constructed Constant: 2
Code Block Started
Code block start position = 1
Looking for variable: x
Constructed Constant: 2
x assigned
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
While cycle created
---Stack size = 2---
If block started
Looking for variable: x
Constructed Constant: 1
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "odd number in third quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "even number in third quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 3---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 1
While block started
Looking for variable: x
Constructed Constant: 2
Code Block Started
Code block start position = 1
Looking for variable: x
Constructed Constant: 2
x assigned
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
While cycle created
---Stack size = 2---
If block started
Looking for variable: x
Constructed Constant: 1
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "odd number in forth quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
Else block started
Code Block Started
Code block start position = 2
LEXED PRINT
Constructed Constant: "even number in forth quarter"
print_statement 211
PrintStatement done
Statement | print_statement
---Stack size = 3---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 3---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
If statement created
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 2---
CodeBlock successfully packed: size = 1
_____CodeBlock created_____
If statement created
---Stack size = 2---
CodeBlock successfully packed: size = 2
_____CodeBlock created_____
Main: 
Start generating code...
AST block size = 2
Generating block...
1 statement:
Generating declaration for x...
Generating Ident with name "x"...
x assigned
Generating assignment for x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating binary op...
Generating binary op...
Generating constant i32...
Extracting x...
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating assignment for x...
Generating binary op...
Extracting x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
B4 assert: 94330814631664
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating assignment for x...
Generating binary op...
Extracting x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
B4 assert: 94330814631664
B4 assert: 94330814631664
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating assignment for x...
Generating binary op...
Extracting x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
B4 assert: 94330814631664
Generating block...
1 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Generating assignment for x...
Generating binary op...
Extracting x...
Generating constant i32...
Extracting x...
Int!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2 statement:
Generating binary op...
Extracting x...
Generating constant i32...
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
Generating block...
1 statement:
Inside PrintStatement codegen
Generating constant string...
value to be printed is calculated
B4 assert: 94330814631664
B4 assert: 94330814631664
B4 assert: 94330814631664
B4 assert: 94330814631664
; ModuleID = 'main'
source_filename = "main"

@fmtInt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmtStr = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@0 = private unnamed_addr constant [30 x i8] c"\22odd number in first quarter\22\00", align 1
@1 = private unnamed_addr constant [31 x i8] c"\22even number in first quarter\22\00", align 1
@2 = private unnamed_addr constant [31 x i8] c"\22odd number in second quarter\22\00", align 1
@3 = private unnamed_addr constant [32 x i8] c"\22even number in second quarter\22\00", align 1
@4 = private unnamed_addr constant [30 x i8] c"\22odd number in third quarter\22\00", align 1
@5 = private unnamed_addr constant [31 x i8] c"\22even number in third quarter\22\00", align 1
@6 = private unnamed_addr constant [30 x i8] c"\22odd number in forth quarter\22\00", align 1
@7 = private unnamed_addr constant [31 x i8] c"\22even number in forth quarter\22\00", align 1

define i32 @main() {
entry:
  %x = alloca i32, align 4
  store i32 37, i32* %x, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = icmp sle i32 0, %1
  %3 = load i32, i32* %x, align 4
  %4 = icmp sle i32 %3, 100
  %5 = and i1 %2, %4
  %ifcond = icmp eq i1 %5, true
  br i1 %ifcond, label %then, label %else52

then:                                             ; preds = %entry
  %6 = load i32, i32* %x, align 4
  %7 = icmp sle i32 %6, 50
  %ifcond1 = icmp eq i1 %7, true
  br i1 %ifcond1, label %then2, label %else22

then2:                                            ; preds = %then
  %8 = load i32, i32* %x, align 4
  %9 = icmp sle i32 %8, 25
  %ifcond3 = icmp eq i1 %9, true
  br i1 %ifcond3, label %then4, label %else8

then4:                                            ; preds = %then2
  br label %condloop

condloop:                                         ; preds = %loop, %then4
  %10 = load i32, i32* %x, align 4
  %11 = icmp sgt i32 %10, 2
  %loopcond = icmp ne i1 %11, false
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %condloop
  %12 = load i32, i32* %x, align 4
  %13 = icmp eq i32 %12, 1
  %ifcond5 = icmp eq i1 %13, true
  br i1 %ifcond5, label %then6, label %else

loop:                                             ; preds = %condloop
  %14 = load i32, i32* %x, align 4
  %15 = sub i32 %14, 2
  store i32 %15, i32* %x, align 4
  %16 = load i32, i32* %x, align 4
  br label %condloop

then6:                                            ; preds = %afterloop
  %print = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @0, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %afterloop
  %print7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @1, i32 0, i32 0))
  br label %merge

merge:                                            ; preds = %else, %then6
  %iftmp = phi i1 [ true, %then6 ], [ true, %else ]
  br label %merge20

else8:                                            ; preds = %then2
  br label %condloop9

condloop9:                                        ; preds = %loop11, %else8
  %17 = load i32, i32* %x, align 4
  %18 = icmp sgt i32 %17, 2
  %loopcond12 = icmp ne i1 %18, false
  br i1 %loopcond12, label %loop11, label %afterloop10

afterloop10:                                      ; preds = %condloop9
  %19 = load i32, i32* %x, align 4
  %20 = icmp eq i32 %19, 1
  %ifcond13 = icmp eq i1 %20, true
  br i1 %ifcond13, label %then14, label %else16

loop11:                                           ; preds = %condloop9
  %21 = load i32, i32* %x, align 4
  %22 = sub i32 %21, 2
  store i32 %22, i32* %x, align 4
  %23 = load i32, i32* %x, align 4
  br label %condloop9

then14:                                           ; preds = %afterloop10
  %print15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @2, i32 0, i32 0))
  br label %merge18

else16:                                           ; preds = %afterloop10
  %print17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @3, i32 0, i32 0))
  br label %merge18

merge18:                                          ; preds = %else16, %then14
  %iftmp19 = phi i1 [ true, %then14 ], [ true, %else16 ]
  br label %merge20

merge20:                                          ; preds = %merge18, %merge
  %iftmp21 = phi i1 [ true, %merge ], [ true, %merge18 ]
  br label %merge50

else22:                                           ; preds = %then
  %24 = load i32, i32* %x, align 4
  %25 = icmp sle i32 %24, 75
  %ifcond23 = icmp eq i1 %25, true
  br i1 %ifcond23, label %then24, label %else36

then24:                                           ; preds = %else22
  br label %condloop25

condloop25:                                       ; preds = %loop27, %then24
  %26 = load i32, i32* %x, align 4
  %27 = icmp sgt i32 %26, 2
  %loopcond28 = icmp ne i1 %27, false
  br i1 %loopcond28, label %loop27, label %afterloop26

afterloop26:                                      ; preds = %condloop25
  %28 = load i32, i32* %x, align 4
  %29 = icmp eq i32 %28, 1
  %ifcond29 = icmp eq i1 %29, true
  br i1 %ifcond29, label %then30, label %else32

loop27:                                           ; preds = %condloop25
  %30 = load i32, i32* %x, align 4
  %31 = sub i32 %30, 2
  store i32 %31, i32* %x, align 4
  %32 = load i32, i32* %x, align 4
  br label %condloop25

then30:                                           ; preds = %afterloop26
  %print31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @4, i32 0, i32 0))
  br label %merge34

else32:                                           ; preds = %afterloop26
  %print33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @5, i32 0, i32 0))
  br label %merge34

merge34:                                          ; preds = %else32, %then30
  %iftmp35 = phi i1 [ true, %then30 ], [ true, %else32 ]
  br label %merge48

else36:                                           ; preds = %else22
  br label %condloop37

condloop37:                                       ; preds = %loop39, %else36
  %33 = load i32, i32* %x, align 4
  %34 = icmp sgt i32 %33, 2
  %loopcond40 = icmp ne i1 %34, false
  br i1 %loopcond40, label %loop39, label %afterloop38

afterloop38:                                      ; preds = %condloop37
  %35 = load i32, i32* %x, align 4
  %36 = icmp eq i32 %35, 1
  %ifcond41 = icmp eq i1 %36, true
  br i1 %ifcond41, label %then42, label %else44

loop39:                                           ; preds = %condloop37
  %37 = load i32, i32* %x, align 4
  %38 = sub i32 %37, 2
  store i32 %38, i32* %x, align 4
  %39 = load i32, i32* %x, align 4
  br label %condloop37

then42:                                           ; preds = %afterloop38
  %print43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @6, i32 0, i32 0))
  br label %merge46

else44:                                           ; preds = %afterloop38
  %print45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmtStr, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @7, i32 0, i32 0))
  br label %merge46

merge46:                                          ; preds = %else44, %then42
  %iftmp47 = phi i1 [ true, %then42 ], [ true, %else44 ]
  br label %merge48

merge48:                                          ; preds = %merge46, %merge34
  %iftmp49 = phi i1 [ true, %merge34 ], [ true, %merge46 ]
  br label %merge50

merge50:                                          ; preds = %merge48, %merge20
  %iftmp51 = phi i1 [ true, %merge20 ], [ true, %merge48 ]
  br label %merge53

else52:                                           ; preds = %entry
  br label %merge53

merge53:                                          ; preds = %else52, %merge50
  %iftmp54 = phi i1 [ true, %merge50 ], [ true, %else52 ]
  ret i32 0
}

declare i32 @printf(i8*, ...)
Code generated..
