%{
#include <iostream>
#include <string>
#include <cstdlib>
#include <cassert>

using namespace std;

int yylex();

int yyerror(const char *p) {
    cerr << "Error! Unexpected token " << p << endl;
    return 1;
}

%}

%union {
    std::string *word;
    char sym;
    int num;
    bool boolean;
};

%token <word> MAIN IF ELSE WHILE SKIP
%token <word> INT_TYPE BOOL_TYPE STRING_TYPE
%token <word> VAR
%token <word> STRING
%token <sym> SEP LP RP LB RB ASSIGN
%token <sym> PLUS MINUS MUL DIV POW
%token <word> EQ NEQ LT LE GT GE NOT AND OR
%token <num> INT
%token <boolean> TRUE_VAL FALSE_VAL

%%
start: MAIN LP RP code_block  {cout << "Main: " << endl;}

code_block: LB statements_seq RB {}

statements_seq: statements_seq statement {}
| statement {}

statement: declaration {}
| assignment {}
| skip {}
;

skip: SKIP SEP {}

assignment: int_assignment | string_assignment | bool_assignment {}

int_assignment: VAR ASSIGN int_expr SEP {}

string_assignment: VAR ASSIGN string_expr SEP {}

bool_assignment: VAR ASSIGN bool_expr SEP {}

declaration: int_declaration | string_declaration | bool_declaration {}

int_declaration: INT_TYPE int_assignment {}

string_declaration: STRING_TYPE string_assignment {}

bool_declaration: BOOL_TYPE bool_assignment {}

int_expr: INT {cout << $1 << endl;}

string_expr: STRING {cout << $1 << endl;}

bool_expr: TRUE_VAL {cout << $1 << endl;}
| FALSE_VAL {cout << $1 << endl;}

%%


int main(int argc, char* argv[])
{
    freopen(argv[1], "r", stdin);
    yyparse();
    fclose(stdin);

    return 0;
}
